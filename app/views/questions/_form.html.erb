<%= form_with(model: question, local: true, html: { class: "question-form" }) do |form| %>
  <% if question.errors.any? %>
    <div id="error_explanation" class="alert alert-danger">
      <h4><%= pluralize(question.errors.count, "error") %> prohibited this question from being saved:</h4>
      <ul>
        <% question.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form-group">
    <%= form.label :title, class: "form-label" %>
    <%= form.text_field :title, class: "form-control #{'is-invalid' if question.errors[:title].any?}", placeholder: "Enter question title" %>
    <% if question.errors[:title].any? %>
      <div class="invalid-feedback">
        <%= question.errors[:title].first %>
      </div>
    <% end %>
  </div>

  <div class="prompts-section">
    <h4>Prompts</h4>

    <%= form.fields_for :prompts do |prompt_form| %>
      <div class="prompt-group" data-prompt-type="<%= prompt_form.object.type %>">
        <%= prompt_form.hidden_field :type %>

        <div class="prompt-header">
          <h5><%= prompt_form.object.type || "Prompt" %></h5>
        </div>

        <div class="row">
          <div class="col-md-8">
            <div class="form-group">
              <%= prompt_form.label :content, "Question Content", class: "form-label" %>
              <%= prompt_form.text_area :content,
                    class: "form-control #{'is-invalid' if prompt_form.object.errors[:content].any?}",
                    rows: 4,
                    placeholder: "Enter the question content" %>
              <% if prompt_form.object.errors[:content].any? %>
                <div class="invalid-feedback">
                  <%= prompt_form.object.errors[:content].first %>
                </div>
              <% end %>
            </div>
          </div>

          <div class="col-md-4">
            <div class="form-group">
              <%= prompt_form.label :format, class: "form-label" %>
              <%= prompt_form.select :format,
                    options_for_select([
                      ['Multiple Choice', 'MultipleChoice'],
                      ['Short Answer', 'ShortAnswer'],
                      ['Um Actually', 'UmActually']
                    ], prompt_form.object.format),
                    { prompt: 'Select format' },
                    { class: "form-control format-select #{'is-invalid' if prompt_form.object.errors[:format].any?}" } %>
              <% if prompt_form.object.errors[:format].any? %>
                <div class="invalid-feedback">
                  <%= prompt_form.object.errors[:format].first %>
                </div>
              <% end %>
            </div>
          </div>
        </div>

        <!-- Multiple Choice Answer Choices -->
        <div class="answer-choices-section" style="<%= 'display: none;' unless prompt_form.object.format == 'MultipleChoice' %>">
          <div class="form-group">
            <%= prompt_form.label :answer_choices, "Answer Choices (4 required)", class: "form-label" %>
            <div class="answer-choices-grid">
              <% 4.times do |i| %>
                <div class="answer-choice-item">
                  <label class="choice-label"><%= ['W', 'X', 'Y', 'Z'][i] %>.</label>
                  <%= text_field_tag "#{prompt_form.object_name}[answer_choices][]",
                        (prompt_form.object.answer_choices && prompt_form.object.answer_choices[i]) || '',
                        class: "form-control",
                        placeholder: "Choice #{['W', 'X', 'Y', 'Z'][i]}" %>
                </div>
              <% end %>
            </div>
            <% if prompt_form.object.errors[:answer_choices].any? %>
              <div class="invalid-feedback d-block">
                <%= prompt_form.object.errors[:answer_choices].first %>
              </div>
            <% end %>
          </div>
        </div>

        <div class="row">
          <!-- Answer field - changes based on format -->
          <div class="col-md-6">
            <div class="form-group">
              <%= prompt_form.label :answer, class: "form-label" %>
              <div class="answer-input-container">
                <!-- Multiple Choice Answer -->
                <div class="mc-answer" style="<%= 'display: none;' unless prompt_form.object.format == 'MultipleChoice' %>">
                  <%= prompt_form.select :answer,
                        options_for_select([
                          ['W', 'W'],
                          ['X', 'X'],
                          ['Y', 'Y'],
                          ['Z', 'Z']
                        ], prompt_form.object.answer),
                        { prompt: 'Select correct answer' },
                        { class: "form-control" } %>
                </div>

                <!-- Short Answer -->
                <div class="sa-answer" style="<%= 'display: none;' unless prompt_form.object.format == 'ShortAnswer' %>">
                  <%= prompt_form.text_field :answer,
                        class: "form-control",
                        placeholder: "Enter the correct answer" %>
                </div>

                <!-- Um Actually Answer -->
                <div class="ua-answer" style="<%= 'display: none;' unless prompt_form.object.format == 'UmActually' %>">
                  <%= prompt_form.text_area :answer,
                        class: "form-control",
                        rows: 2,
                        placeholder: "Um, actually, [correction]..." %>
                  <small class="form-text text-muted">Must start with "Um, actually," or "Um actually:"</small>
                </div>
              </div>
              <% if prompt_form.object.errors[:answer].any? %>
                <div class="invalid-feedback d-block">
                  <%= prompt_form.object.errors[:answer].first %>
                </div>
              <% end %>
            </div>
          </div>
        </div>

        <% unless prompt_form.object.new_record? %>
          <%= prompt_form.hidden_field :id %>
        <% end %>
      </div>
    <% end %>
  </div>

  <div class="form-actions">
    <%= form.submit class: "btn btn-primary" %>
    <%= link_to 'Cancel', question_path(question), class: "btn btn-secondary" if question.persisted? %>
    <%= link_to 'Cancel', questions_path, class: "btn btn-secondary" if question.new_record? %>
  </div>
<% end %>

<style>
  .question-form {
    max-width: 1000px;
    margin: 0 auto;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-label {
    font-weight: 600;
    color: #333;
    margin-bottom: 8px;
    display: block;
  }

  .form-control {
    width: 100%;
    padding: 12px 15px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 16px;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-control:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  }

  .form-control.is-invalid {
    border-color: #dc3545;
  }

  .form-control.is-invalid:focus {
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
  }

  .invalid-feedback {
    color: #dc3545;
    font-size: 14px;
    margin-top: 5px;
  }

  .invalid-feedback.d-block {
    display: block;
  }

  .prompts-section {
    margin: 30px 0;
  }

  .prompts-section h4 {
    margin: 0 0 25px 0;
    color: #495057;
  }

  .prompt-group {
    margin-bottom: 40px;
    padding: 25px;
    background: #f8f9fa;
    border-radius: 12px;
    border: 1px solid #dee2e6;
  }

  .prompt-group[data-prompt-type="TossUp"] {
    border-left: 4px solid #28a745;
  }

  .prompt-group[data-prompt-type="Bonus"] {
    border-left: 4px solid #007bff;
  }

  .prompt-header {
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #dee2e6;
  }

  .prompt-header h5 {
    margin: 0;
    color: #495057;
    font-size: 1.2em;
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -15px;
  }

  .col-md-4, .col-md-6, .col-md-8 {
    padding: 0 15px;
    flex: 1;
  }

  .col-md-4 {
    max-width: 33.333%;
  }

  .col-md-6 {
    max-width: 50%;
  }

  .col-md-8 {
    max-width: 66.667%;
  }

  .answer-choices-section {
    margin: 20px 0;
    padding: 15px;
    background: white;
    border-radius: 8px;
    border: 1px solid #e1e5e9;
  }

  .answer-choices-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-top: 10px;
  }

  .answer-choice-item {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .choice-label {
    font-weight: 600;
    color: #495057;
    min-width: 25px;
    margin: 0;
  }

  .answer-input-container > div {
    transition: all 0.3s ease;
  }

  .form-text {
    font-size: 12px;
    color: #6c757d;
    margin-top: 5px;
  }

  .form-actions {
    display: flex;
    gap: 12px;
    padding: 25px 0;
    border-top: 1px solid #e1e5e9;
    margin-top: 30px;
  }

  .btn {
    padding: 12px 24px;
    border-radius: 6px;
    text-decoration: none;
    font-size: 16px;
    font-weight: 600;
    border: 2px solid;
    cursor: pointer;
    transition: all 0.2s;
    display: inline-block;
  }

  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    color: white;
  }

  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
  }

  .btn-secondary {
    background-color: transparent;
    border-color: #6c757d;
    color: #6c757d;
  }

  .btn-secondary:hover {
    background-color: #6c757d;
    color: white;
  }

  .alert {
    padding: 15px 20px;
    border-radius: 8px;
    margin-bottom: 25px;
  }

  .alert-danger {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
  }

  .alert h4 {
    margin: 0 0 10px 0;
    font-size: 18px;
  }

  .alert ul {
    margin: 0;
    padding-left: 20px;
  }

  .alert li {
    margin-bottom: 5px;
  }

  @media (max-width: 768px) {
    .question-form {
      padding: 15px;
    }

    .col-md-4, .col-md-6, .col-md-8 {
      max-width: 100%;
      margin-bottom: 15px;
    }

    .row {
      flex-direction: column;
    }

    .answer-choices-grid {
      grid-template-columns: 1fr;
    }

    .form-actions {
      flex-direction: column;
    }

    .btn {
      text-align: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle format changes for each prompt
    document.querySelectorAll('.format-select').forEach(function(select) {
      const promptGroup = select.closest('.prompt-group');
      const answerChoicesSection = promptGroup.querySelector('.answer-choices-section');
      const mcAnswer = promptGroup.querySelector('.mc-answer');
      const saAnswer = promptGroup.querySelector('.sa-answer');
      const uaAnswer = promptGroup.querySelector('.ua-answer');

      function toggleAnswerFields(format) {
        // Hide all answer fields first
        if (answerChoicesSection) answerChoicesSection.style.display = 'none';
        if (mcAnswer) mcAnswer.style.display = 'none';
        if (saAnswer) saAnswer.style.display = 'none';
        if (uaAnswer) uaAnswer.style.display = 'none';

        // Show appropriate fields based on format
        switch(format) {
          case 'MultipleChoice':
            if (answerChoicesSection) answerChoicesSection.style.display = 'block';
            if (mcAnswer) mcAnswer.style.display = 'block';
            break;
          case 'ShortAnswer':
            if (saAnswer) saAnswer.style.display = 'block';
            break;
          case 'UmActually':
            if (uaAnswer) uaAnswer.style.display = 'block';
            break;
        }
      }

      // Set initial state
      toggleAnswerFields(select.value);

      // Handle format changes
      select.addEventListener('change', function() {
        toggleAnswerFields(this.value);
      });
    });
  });
</script>